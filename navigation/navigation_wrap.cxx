/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: navigation.i

#define SWIGMODULE navigation

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include "Navigation.h"
#include "MoveMap.h"
#include <windows.h>

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_navigation_cff4befa467ca9b5(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_navigation_cff4befa467ca9b5(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


void _wrap_XYZ_X_set_navigation_cff4befa467ca9b5(XYZ *_swig_go_0, float _swig_go_1) {
  XYZ *arg1 = (XYZ *) 0 ;
  float arg2 ;
  
  arg1 = *(XYZ **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->X = arg2;
  
}


float _wrap_XYZ_X_get_navigation_cff4befa467ca9b5(XYZ *_swig_go_0) {
  XYZ *arg1 = (XYZ *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(XYZ **)&_swig_go_0; 
  
  result = (float) ((arg1)->X);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_XYZ_Y_set_navigation_cff4befa467ca9b5(XYZ *_swig_go_0, float _swig_go_1) {
  XYZ *arg1 = (XYZ *) 0 ;
  float arg2 ;
  
  arg1 = *(XYZ **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->Y = arg2;
  
}


float _wrap_XYZ_Y_get_navigation_cff4befa467ca9b5(XYZ *_swig_go_0) {
  XYZ *arg1 = (XYZ *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(XYZ **)&_swig_go_0; 
  
  result = (float) ((arg1)->Y);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_XYZ_Z_set_navigation_cff4befa467ca9b5(XYZ *_swig_go_0, float _swig_go_1) {
  XYZ *arg1 = (XYZ *) 0 ;
  float arg2 ;
  
  arg1 = *(XYZ **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->Z = arg2;
  
}


float _wrap_XYZ_Z_get_navigation_cff4befa467ca9b5(XYZ *_swig_go_0) {
  XYZ *arg1 = (XYZ *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(XYZ **)&_swig_go_0; 
  
  result = (float) ((arg1)->Z);
  _swig_go_result = result; 
  return _swig_go_result;
}


XYZ *_wrap_new_XYZ__SWIG_0_navigation_cff4befa467ca9b5() {
  XYZ *result = 0 ;
  XYZ *_swig_go_result;
  
  
  result = (XYZ *)new XYZ();
  *(XYZ **)&_swig_go_result = (XYZ *)result; 
  return _swig_go_result;
}


XYZ *_wrap_new_XYZ__SWIG_1_navigation_cff4befa467ca9b5(double _swig_go_0, double _swig_go_1, double _swig_go_2) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  XYZ *result = 0 ;
  XYZ *_swig_go_result;
  
  arg1 = (double)_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  
  result = (XYZ *)new XYZ(arg1,arg2,arg3);
  *(XYZ **)&_swig_go_result = (XYZ *)result; 
  return _swig_go_result;
}


void _wrap_delete_XYZ_navigation_cff4befa467ca9b5(XYZ *_swig_go_0) {
  XYZ *arg1 = (XYZ *) 0 ;
  
  arg1 = *(XYZ **)&_swig_go_0; 
  
  delete arg1;
  
}


Navigation *_wrap_Navigation_GetInstance_navigation_cff4befa467ca9b5() {
  Navigation *result = 0 ;
  Navigation *_swig_go_result;
  
  
  result = (Navigation *)Navigation::GetInstance();
  *(Navigation **)&_swig_go_result = (Navigation *)result; 
  return _swig_go_result;
}


void _wrap_Navigation_Initialize_navigation_cff4befa467ca9b5(Navigation *_swig_go_0) {
  Navigation *arg1 = (Navigation *) 0 ;
  
  arg1 = *(Navigation **)&_swig_go_0; 
  
  (arg1)->Initialize();
  
}


void _wrap_Navigation_Release_navigation_cff4befa467ca9b5(Navigation *_swig_go_0) {
  Navigation *arg1 = (Navigation *) 0 ;
  
  arg1 = *(Navigation **)&_swig_go_0; 
  
  (arg1)->Release();
  
}


XYZ *_wrap_Navigation_CalculatePath_navigation_cff4befa467ca9b5(Navigation *_swig_go_0, intgo _swig_go_1, XYZ *_swig_go_2, XYZ *_swig_go_3, bool _swig_go_4, intgo *_swig_go_5) {
  Navigation *arg1 = (Navigation *) 0 ;
  unsigned int arg2 ;
  XYZ arg3 ;
  XYZ arg4 ;
  bool arg5 ;
  int *arg6 = (int *) 0 ;
  XYZ *argp3 ;
  XYZ *argp4 ;
  XYZ *result = 0 ;
  XYZ *_swig_go_result;
  
  arg1 = *(Navigation **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  argp3 = (XYZ *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null XYZ");
  }
  arg3 = (XYZ)*argp3;
  
  
  argp4 = (XYZ *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null XYZ");
  }
  arg4 = (XYZ)*argp4;
  
  arg5 = (bool)_swig_go_4; 
  arg6 = *(int **)&_swig_go_5; 
  
  result = (XYZ *)(arg1)->CalculatePath(arg2,arg3,arg4,arg5,arg6);
  *(XYZ **)&_swig_go_result = (XYZ *)result; 
  return _swig_go_result;
}


void _wrap_Navigation_FreePathArr_navigation_cff4befa467ca9b5(Navigation *_swig_go_0, XYZ *_swig_go_1) {
  Navigation *arg1 = (Navigation *) 0 ;
  XYZ *arg2 = (XYZ *) 0 ;
  
  arg1 = *(Navigation **)&_swig_go_0; 
  arg2 = *(XYZ **)&_swig_go_1; 
  
  (arg1)->FreePathArr(arg2);
  
}


std::string *_wrap_Navigation_GetMmapsPath_navigation_cff4befa467ca9b5(Navigation *_swig_go_0) {
  Navigation *arg1 = (Navigation *) 0 ;
  std::string result;
  std::string *_swig_go_result;
  
  arg1 = *(Navigation **)&_swig_go_0; 
  
  result = (arg1)->GetMmapsPath();
  *(std::string **)&_swig_go_result = new std::string(result); 
  return _swig_go_result;
}


Navigation *_wrap_new_Navigation_navigation_cff4befa467ca9b5() {
  Navigation *result = 0 ;
  Navigation *_swig_go_result;
  
  
  result = (Navigation *)new Navigation();
  *(Navigation **)&_swig_go_result = (Navigation *)result; 
  return _swig_go_result;
}


void _wrap_delete_Navigation_navigation_cff4befa467ca9b5(Navigation *_swig_go_0) {
  Navigation *arg1 = (Navigation *) 0 ;
  
  arg1 = *(Navigation **)&_swig_go_0; 
  
  delete arg1;
  
}


void *_wrap_dtCustomAlloc_navigation_cff4befa467ca9b5(intgo _swig_go_0, dtAllocHint *_swig_go_1) {
  int arg1 ;
  dtAllocHint arg2 ;
  dtAllocHint *argp2 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  argp2 = (dtAllocHint *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null dtAllocHint");
  }
  arg2 = (dtAllocHint)*argp2;
  
  
  result = (void *)dtCustomAlloc(arg1,arg2);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


void _wrap_dtCustomFree_navigation_cff4befa467ca9b5(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  dtCustomFree(arg1);
  
}


MMAP::MMapData *_wrap_new_MMapData_navigation_cff4befa467ca9b5(dtNavMesh *_swig_go_0) {
  dtNavMesh *arg1 = (dtNavMesh *) 0 ;
  MMAP::MMapData *result = 0 ;
  MMAP::MMapData *_swig_go_result;
  
  arg1 = *(dtNavMesh **)&_swig_go_0; 
  
  result = (MMAP::MMapData *)new MMAP::MMapData(arg1);
  *(MMAP::MMapData **)&_swig_go_result = (MMAP::MMapData *)result; 
  return _swig_go_result;
}


void _wrap_delete_MMapData_navigation_cff4befa467ca9b5(MMAP::MMapData *_swig_go_0) {
  MMAP::MMapData *arg1 = (MMAP::MMapData *) 0 ;
  
  arg1 = *(MMAP::MMapData **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_MMapData_navMesh_set_navigation_cff4befa467ca9b5(MMAP::MMapData *_swig_go_0, dtNavMesh *_swig_go_1) {
  MMAP::MMapData *arg1 = (MMAP::MMapData *) 0 ;
  dtNavMesh *arg2 = (dtNavMesh *) 0 ;
  
  arg1 = *(MMAP::MMapData **)&_swig_go_0; 
  arg2 = *(dtNavMesh **)&_swig_go_1; 
  
  if (arg1) (arg1)->navMesh = arg2;
  
}


dtNavMesh *_wrap_MMapData_navMesh_get_navigation_cff4befa467ca9b5(MMAP::MMapData *_swig_go_0) {
  MMAP::MMapData *arg1 = (MMAP::MMapData *) 0 ;
  dtNavMesh *result = 0 ;
  dtNavMesh *_swig_go_result;
  
  arg1 = *(MMAP::MMapData **)&_swig_go_0; 
  
  result = (dtNavMesh *) ((arg1)->navMesh);
  *(dtNavMesh **)&_swig_go_result = (dtNavMesh *)result; 
  return _swig_go_result;
}


void _wrap_MMapData_navMeshQueries_set_navigation_cff4befa467ca9b5(MMAP::MMapData *_swig_go_0, std::unordered_map< unsigned int,dtNavMeshQuery * > *_swig_go_1) {
  MMAP::MMapData *arg1 = (MMAP::MMapData *) 0 ;
  MMAP::NavMeshQuerySet arg2 ;
  MMAP::NavMeshQuerySet *argp2 ;
  
  arg1 = *(MMAP::MMapData **)&_swig_go_0; 
  
  argp2 = (MMAP::NavMeshQuerySet *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null MMAP::NavMeshQuerySet");
  }
  arg2 = (MMAP::NavMeshQuerySet)*argp2;
  
  
  if (arg1) (arg1)->navMeshQueries = arg2;
  
}


std::unordered_map< unsigned int,dtNavMeshQuery * > *_wrap_MMapData_navMeshQueries_get_navigation_cff4befa467ca9b5(MMAP::MMapData *_swig_go_0) {
  MMAP::MMapData *arg1 = (MMAP::MMapData *) 0 ;
  MMAP::NavMeshQuerySet result;
  std::unordered_map< unsigned int,dtNavMeshQuery * > *_swig_go_result;
  
  arg1 = *(MMAP::MMapData **)&_swig_go_0; 
  
  result =  ((arg1)->navMeshQueries);
  *(MMAP::NavMeshQuerySet **)&_swig_go_result = new MMAP::NavMeshQuerySet(result); 
  return _swig_go_result;
}


void _wrap_MMapData_mmapLoadedTiles_set_navigation_cff4befa467ca9b5(MMAP::MMapData *_swig_go_0, std::unordered_map< unsigned int,dtTileRef > *_swig_go_1) {
  MMAP::MMapData *arg1 = (MMAP::MMapData *) 0 ;
  MMAP::MMapTileSet arg2 ;
  MMAP::MMapTileSet *argp2 ;
  
  arg1 = *(MMAP::MMapData **)&_swig_go_0; 
  
  argp2 = (MMAP::MMapTileSet *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null MMAP::MMapTileSet");
  }
  arg2 = (MMAP::MMapTileSet)*argp2;
  
  
  if (arg1) (arg1)->mmapLoadedTiles = arg2;
  
}


std::unordered_map< unsigned int,dtTileRef > *_wrap_MMapData_mmapLoadedTiles_get_navigation_cff4befa467ca9b5(MMAP::MMapData *_swig_go_0) {
  MMAP::MMapData *arg1 = (MMAP::MMapData *) 0 ;
  MMAP::MMapTileSet result;
  std::unordered_map< unsigned int,dtTileRef > *_swig_go_result;
  
  arg1 = *(MMAP::MMapData **)&_swig_go_0; 
  
  result =  ((arg1)->mmapLoadedTiles);
  *(MMAP::MMapTileSet **)&_swig_go_result = new MMAP::MMapTileSet(result); 
  return _swig_go_result;
}


void _wrap_delete_MMapManager_navigation_cff4befa467ca9b5(MMAP::MMapManager *_swig_go_0) {
  MMAP::MMapManager *arg1 = (MMAP::MMapManager *) 0 ;
  
  arg1 = *(MMAP::MMapManager **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_MMapManager_hasLoadedWesternContinent_set_navigation_cff4befa467ca9b5(MMAP::MMapManager *_swig_go_0, bool _swig_go_1) {
  MMAP::MMapManager *arg1 = (MMAP::MMapManager *) 0 ;
  bool arg2 ;
  
  arg1 = *(MMAP::MMapManager **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->hasLoadedWesternContinent = arg2;
  
}


bool _wrap_MMapManager_hasLoadedWesternContinent_get_navigation_cff4befa467ca9b5(MMAP::MMapManager *_swig_go_0) {
  MMAP::MMapManager *arg1 = (MMAP::MMapManager *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(MMAP::MMapManager **)&_swig_go_0; 
  
  result = (bool) ((arg1)->hasLoadedWesternContinent);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_MMapManager_hasLoadedEasternContinent_set_navigation_cff4befa467ca9b5(MMAP::MMapManager *_swig_go_0, bool _swig_go_1) {
  MMAP::MMapManager *arg1 = (MMAP::MMapManager *) 0 ;
  bool arg2 ;
  
  arg1 = *(MMAP::MMapManager **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->hasLoadedEasternContinent = arg2;
  
}


bool _wrap_MMapManager_hasLoadedEasternContinent_get_navigation_cff4befa467ca9b5(MMAP::MMapManager *_swig_go_0) {
  MMAP::MMapManager *arg1 = (MMAP::MMapManager *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(MMAP::MMapManager **)&_swig_go_0; 
  
  result = (bool) ((arg1)->hasLoadedEasternContinent);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_MMapManager_loadMap_navigation_cff4befa467ca9b5(MMAP::MMapManager *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  MMAP::MMapManager *arg1 = (MMAP::MMapManager *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(MMAP::MMapManager **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  result = (bool)(arg1)->loadMap(arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


dtNavMeshQuery *_wrap_MMapManager_GetNavMeshQuery_navigation_cff4befa467ca9b5(MMAP::MMapManager *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  MMAP::MMapManager *arg1 = (MMAP::MMapManager *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  dtNavMeshQuery *result = 0 ;
  dtNavMeshQuery *_swig_go_result;
  
  arg1 = *(MMAP::MMapManager **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = (unsigned int)_swig_go_2; 
  
  result = (dtNavMeshQuery *)(arg1)->GetNavMeshQuery(arg2,arg3);
  *(dtNavMeshQuery **)&_swig_go_result = (dtNavMeshQuery *)result; 
  return _swig_go_result;
}


dtNavMesh *_wrap_MMapManager_GetNavMesh_navigation_cff4befa467ca9b5(MMAP::MMapManager *_swig_go_0, intgo _swig_go_1) {
  MMAP::MMapManager *arg1 = (MMAP::MMapManager *) 0 ;
  unsigned int arg2 ;
  dtNavMesh *result = 0 ;
  dtNavMesh *_swig_go_result;
  
  arg1 = *(MMAP::MMapManager **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  result = (dtNavMesh *)(arg1)->GetNavMesh(arg2);
  *(dtNavMesh **)&_swig_go_result = (dtNavMesh *)result; 
  return _swig_go_result;
}


intgo _wrap_MMapManager_getLoadedMapsCount_navigation_cff4befa467ca9b5(MMAP::MMapManager *_swig_go_0) {
  MMAP::MMapManager *arg1 = (MMAP::MMapManager *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(MMAP::MMapManager **)&_swig_go_0; 
  
  result = (unsigned int)((MMAP::MMapManager const *)arg1)->getLoadedMapsCount();
  _swig_go_result = result; 
  return _swig_go_result;
}


MMAP::MMapManager *_wrap_new_MMapManager_navigation_cff4befa467ca9b5() {
  MMAP::MMapManager *result = 0 ;
  MMAP::MMapManager *_swig_go_result;
  
  
  result = (MMAP::MMapManager *)new MMAP::MMapManager();
  *(MMAP::MMapManager **)&_swig_go_result = (MMAP::MMapManager *)result; 
  return _swig_go_result;
}


MMAP::MMapManager *_wrap_MMapFactory_createOrGetMMapManager_navigation_cff4befa467ca9b5() {
  MMAP::MMapManager *result = 0 ;
  MMAP::MMapManager *_swig_go_result;
  
  
  result = (MMAP::MMapManager *)MMAP::MMapFactory::createOrGetMMapManager();
  *(MMAP::MMapManager **)&_swig_go_result = (MMAP::MMapManager *)result; 
  return _swig_go_result;
}


MMAP::MMapFactory *_wrap_new_MMapFactory_navigation_cff4befa467ca9b5() {
  MMAP::MMapFactory *result = 0 ;
  MMAP::MMapFactory *_swig_go_result;
  
  
  result = (MMAP::MMapFactory *)new MMAP::MMapFactory();
  *(MMAP::MMapFactory **)&_swig_go_result = (MMAP::MMapFactory *)result; 
  return _swig_go_result;
}


void _wrap_delete_MMapFactory_navigation_cff4befa467ca9b5(MMAP::MMapFactory *_swig_go_0) {
  MMAP::MMapFactory *arg1 = (MMAP::MMapFactory *) 0 ;
  
  arg1 = *(MMAP::MMapFactory **)&_swig_go_0; 
  
  delete arg1;
  
}


#ifdef __cplusplus
}
#endif

